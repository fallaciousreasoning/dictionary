{"version":3,"sources":["dictionary.ts","SearchResult.tsx","Search.tsx","throttle.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["words","window","entries","dictionaryLoadPromise","getRawWords","a","localForage","getItem","rawText","fetch","dictionaryResponse","ok","text","setItem","JSON","parse","ensureLoaded","Promise","resolve","reject","length","word","rawWords","push","sort","globalThis","search","regexString","split","join","findByRegex","MatchList","maxResults","results","this","matchPosition","insertionIndex","matchGoodness","splice","pop","map","r","didYouMean","query","matches","similarity","stringSimilarity","compareTwoStrings","addResult","toEntries","regex","RegExp","match","exec","index","result","stemmed","stem","source","WordLink","href","SearchResult","entry","className","d","i","key","definition","Search","props","useState","setQuery","debouncedQuery","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","loading","setLoading","setResults","suggestions","setSuggestions","onSearchChanged","useCallback","e","target","history","replaceState","encodeURIComponent","searchParams","URLSearchParams","location","paramsQuery","decodeURIComponent","get","then","showSuggestions","type","placeholder","onChange","s","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e42ef166.chunk.js","sourcesContent":["import localForage from 'localforage';\nimport stem from 'stem-porter';\nimport stringSimilarity from 'string-similarity';\n\nconst dictionaryName = 'dictionary.json';\n\nexport interface Definition {\n    word: string;\n    definition: string;\n    antonyms: string[];\n    synonyms: string[];\n    alternateSpellings: string[];\n}\n\nexport type Entry = Definition[] & { word: string };\n\nexport const words: string[] = [];\nwindow['words'] = words;\n\nexport const entries: {\n    [word: string]: Entry;\n} = {};\nwindow['entries'] = entries;\n\nconst getRawWords = async () => {\n    let rawText = await localForage.getItem<string>(dictionaryName);\n    if (!rawText) {\n        const dictionaryResponse = await fetch('./' + dictionaryName);\n        if (!dictionaryResponse.ok)\n            return {};\n\n        // Save the dictionary to disk.\n        rawText = await dictionaryResponse.text();\n\n        await localForage.setItem(dictionaryName, rawText);\n    }\n\n    return JSON.parse(rawText);\n}\n\nlet dictionaryLoadPromise: Promise<void>;\nexport const ensureLoaded = async () => {\n    if (!dictionaryLoadPromise) {\n        dictionaryLoadPromise = new Promise(async (resolve, reject) => {\n            // If we have words, return.\n            if (words.length) {\n                resolve();\n                return;\n            }\n\n            const rawWords = await getRawWords();\n\n            for (const word in rawWords) {\n                words.push(word);\n                entries[word] = rawWords[word];\n                entries[word].word = word;\n            }\n\n            words.sort();\n\n            // For debugging.\n            globalThis.words = words;\n            globalThis.entries = entries;\n\n            resolve();\n        });\n    }\n    return dictionaryLoadPromise;\n}\n\nexport const wordExists = async (word: string) => {\n    await ensureLoaded();\n\n    return !!entries[word];\n}\n\nexport const findByWildCard = (search: string) => {\n    const regexString = search\n        // * ==> (.*)\n        .split('*').join('.*')\n        // ? ==> .\n        .split('?').join('.');\n    return findByRegex(regexString);\n}\nwindow['findByWildcard'] = findByWildCard;\n\nclass MatchList {\n    results: { word: string, matchGoodness: number }[];\n    maxResults: number;\n\n    constructor(maxResults: number) {\n        this.results = [];\n        this.maxResults = maxResults;\n    }\n\n    addResult(word: string, matchPosition: number) {\n        let insertionIndex = 0;\n        while (insertionIndex < this.results.length\n            && this.results[insertionIndex].matchGoodness <= matchPosition) {\n            insertionIndex++;\n        }\n\n        this.results.splice(insertionIndex, 0, { word, matchGoodness: matchPosition })\n\n        // If we have too many results, remove the last one.\n        if (this.results.length > this.maxResults)\n            this.results.pop();\n    }\n\n    toEntries() {\n        return this.results.map(r => entries[r.word]);\n    }\n}\n\nexport const didYouMean = async (query: string, maxResults = 5) => {\n    await ensureLoaded();\n\n    const matches = new MatchList(maxResults);\n    for (const word of words) {\n        const similarity = stringSimilarity.compareTwoStrings(query, word);\n        matches.addResult(word, -similarity);\n    }\n\n    return matches.toEntries();\n}\n\nexport const findByRegex = async (regex: RegExp | string, maxResults = 100) => {\n    if (typeof regex === 'string')\n        regex = new RegExp(regex, 'i');\n\n    await ensureLoaded();\n\n    const matches = new MatchList(maxResults);\n    for (const word of words) {\n        const match = regex.exec(word);\n        if (!match) continue;\n\n        matches.addResult(word, match.index);\n    }\n\n    const result = matches.toEntries();\n    if (result.length !== 0)\n      return result;\n\n    const stemmed = stem(regex.source);\n    if (stemmed == regex.source)\n      return result;\n\n    return findByRegex(stemmed, maxResults);\n}\nwindow['findByRegex'] = findByRegex;","import * as React from 'react';\nimport { Entry, Definition, entries } from './dictionary';\n\nexport const WordLink = ({ word }: { word: string }) => {\n    return <a href={`?query=${word}`}>{word}</a>\n}\n\nconst Related = ({ definition }: { definition: Definition }) => {\n    const related = [...(definition.antonyms || []), ...(definition.synonyms || [])];\n    if (!related.length)\n        return null;\n\n    return <>\n        <b>See Also: </b> {related.map((r, i) => <>\n            {i !== 0 && \", \"}\n            <WordLink key={r} word={r} />\n        </>)}\n    </>\n}\n\nexport const SearchResult = ({ entry }: { entry: Entry }) => {\n    return <div className=\"search-result\">\n        <h2>{entry.word}</h2>\n        <ul>\n            {entry.map((d, i) => <li key={i}>\n                {d.definition}\n                {/* <br />\n                <Related definition={d} /> */}\n            </li>)}\n        </ul>\n    </div>\n}","import React, { useState, useCallback, useEffect } from 'react';\nimport { findByRegex, Entry, didYouMean } from './dictionary';\nimport { SearchResult, WordLink } from './SearchResult';\nimport { useDebounce } from './throttle';\n\nexport const Search = (props) => {\n    const [query, setQuery] = useState('');\n    const debouncedQuery = useDebounce(query, 500);\n    const [loading, setLoading] = useState(true);\n\n    const [results, setResults] = useState<Entry[]>([]);\n    const [suggestions, setSuggestions] = useState<Entry[]>([]);\n\n    const onSearchChanged = useCallback(async e => {\n        const query: string = e.target.value;\n        setQuery(query);\n        setLoading(true);\n        setSuggestions([]);\n        setResults(await findByRegex(query));\n        setLoading(false);\n        window.history.replaceState({},\n            `Dictionary results for ${query}`,\n            `?query=${encodeURIComponent(query)}`)\n    }, []);\n\n    useEffect(() => {\n        const searchParams = new URLSearchParams(window.location.search);\n        const paramsQuery = decodeURIComponent(searchParams.get('query') || '');\n\n        setQuery(paramsQuery);\n        findByRegex(paramsQuery).then(setResults).then(() => setLoading(false));\n        return () => { }\n    }, []);\n\n    useEffect(() => {\n        if (results.length !== 0 || query !== debouncedQuery)\n          return;\n\n        didYouMean(debouncedQuery).then(setSuggestions);\n    }, [debouncedQuery, query, results]);\n\n    const showSuggestions = suggestions.length !== 0 && results.length === 0;\n\n    return <div>\n        <div className=\"search-header\">\n            <input className=\"search-box\"\n                type=\"search\"\n                value={query}\n                placeholder=\"search for words\"\n                onChange={onSearchChanged} />\n        </div>\n        <div>\n            {(!loading && results.length === 0\n                ? <h2>No results</h2>\n                : results.map(entry => <SearchResult entry={entry} key={entry.word} />))}\n            {showSuggestions && <div>\n                <h2>Did you mean:</h2>\n                <ul>\n                    {suggestions.map(s => <li key={s.word}><WordLink word={s.word}/></li>)}\n                </ul>\n            </div>}\n            {loading && <div className=\"spinner\" />}\n        </div>\n    </div>;\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => clearTimeout(handler);\n    }, [value, delay]);\n\n    return debouncedValue;\n}\n  ","import React from 'react';\nimport './App.css';\n\nimport {Search } from './Search';\n\nfunction App() {\n  return (\n    <div className=\"dictionary\">\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './spinner.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ensureLoaded } from './dictionary';\n\nensureLoaded();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}