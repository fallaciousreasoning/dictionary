{"version":3,"sources":["dictionary.ts","selectionHelper.ts","SearchResult.tsx","history.ts","Search.tsx","throttle.ts","WordTip.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["words","window","entries","dictionaryLoadPromise","getRawWords","a","localForage","getItem","rawText","fetch","dictionaryResponse","ok","text","setItem","JSON","parse","ensureLoaded","Promise","resolve","reject","length","rawWords","word","some","d","definition","lowered","toLowerCase","push","sort","globalThis","search","regexString","split","join","findByRegex","MatchList","maxResults","results","this","matchPosition","insertionIndex","matchGoodness","splice","pop","map","r","didYouMean","query","matches","similarity","stringSimilarity","compareTwoStrings","addResult","toEntries","regex","RegExp","match","exec","index","result","stemmed","stem","source","selectedListeners","updateSelection","selected","selection","document","getSelection","rangeCount","toString","filter","t","trim","rect","getRangeAt","getBoundingClientRect","getSelectedWord","listener","addEventListener","passive","wordLinkClickHandler","e","ctrlKey","preventDefault","history","pushState","currentTarget","href","WordLink","onClick","Def","parts","w","i","key","startsWith","substring","SearchResult","entry","className","_wr","type","orig","rv","apply","arguments","Event","dispatchEvent","replaceState","locationListeners","onLocationChanged","location","Search","props","useState","setQuery","locationQueryString","useEffect","indexOf","useQueryString","debouncedQuery","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","loading","setLoading","setResults","suggestions","setSuggestions","updateResults","q","encodeURIComponent","onSearchChanged","useCallback","target","searchParams","URLSearchParams","paramsQuery","decodeURIComponent","get","then","showSuggestions","placeholder","onChange","s","VirtualReference","width","height","WordTip","setR","removeAt","useSelectedWord","searchCallback","virtualRef","Popper","referenceElement","placement","ref","style","data-placement","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c2d3ea5.chunk.js","sourcesContent":["import localForage from 'localforage';\nimport stem from 'stem-porter';\nimport stringSimilarity from 'string-similarity';\n\nconst dictionaryName = 'dictionary.json';\n\nexport interface Definition {\n    word: string;\n    definition: string;\n    antonyms: string[];\n    synonyms: string[];\n    alternateSpellings: string[];\n}\n\nexport type Entry = Definition[] & { word: string };\n\nexport const words: string[] = [];\nwindow['words'] = words;\n\nexport const entries: {\n    [word: string]: Entry;\n} = {};\nwindow['entries'] = entries;\n\nconst getRawWords = async () => {\n    let rawText = await localForage.getItem<string>(dictionaryName);\n    if (!rawText) {\n        const dictionaryResponse = await fetch('./' + dictionaryName);\n        if (!dictionaryResponse.ok)\n            return {};\n\n        // Save the dictionary to disk.\n        rawText = await dictionaryResponse.text();\n\n        await localForage.setItem(dictionaryName, rawText);\n    }\n\n    return JSON.parse(rawText);\n}\n\nlet dictionaryLoadPromise: Promise<void>;\nexport const ensureLoaded = async () => {\n    if (!dictionaryLoadPromise) {\n        dictionaryLoadPromise = new Promise(async (resolve, reject) => {\n            // If we have words, return.\n            if (words.length) {\n                resolve();\n                return;\n            }\n\n            const rawWords = await getRawWords();\n\n            for (const word in rawWords) {\n                // Ignore words with no definitions (for now).\n                if (rawWords.length === 0 || !(rawWords[word] as Entry).some(d => d.definition))\n                  continue;\n\n                let lowered = word.toLowerCase();\n\n                words.push(lowered);\n                entries[lowered] = rawWords[word];\n                entries[lowered].word = lowered;\n            }\n\n            words.sort();\n\n            // For debugging.\n            globalThis.words = words;\n            globalThis.entries = entries;\n\n            resolve();\n        });\n    }\n    return dictionaryLoadPromise;\n}\n\nexport const wordExists = async (word: string) => {\n    await ensureLoaded();\n\n    return !!entries[word];\n}\n\nexport const findByWildCard = (search: string) => {\n    const regexString = search\n        // * ==> (.*)\n        .split('*').join('.*')\n        // ? ==> .\n        .split('?').join('.');\n    return findByRegex(regexString);\n}\nwindow['findByWildcard'] = findByWildCard;\n\nclass MatchList {\n    results: { word: string, matchGoodness: number }[];\n    maxResults: number;\n\n    constructor(maxResults: number) {\n        this.results = [];\n        this.maxResults = maxResults;\n    }\n\n    addResult(word: string, matchPosition: number) {\n        let insertionIndex = 0;\n        while (insertionIndex < this.results.length\n            && this.results[insertionIndex].matchGoodness <= matchPosition) {\n            insertionIndex++;\n        }\n\n        this.results.splice(insertionIndex, 0, { word, matchGoodness: matchPosition })\n\n        // If we have too many results, remove the last one.\n        if (this.results.length > this.maxResults)\n            this.results.pop();\n    }\n\n    toEntries() {\n        return this.results.map(r => entries[r.word]);\n    }\n}\n\nexport const didYouMean = async (query: string, maxResults = 5) => {\n    await ensureLoaded();\n\n    const matches = new MatchList(maxResults);\n    for (const word of words) {\n        const similarity = stringSimilarity.compareTwoStrings(query, word);\n        matches.addResult(word, -similarity);\n    }\n\n    return matches.toEntries();\n}\n\nexport const findByRegex = async (regex: RegExp | string, maxResults = 100) => {\n    if (typeof regex === 'string')\n        regex = new RegExp(regex, 'i');\n\n    await ensureLoaded();\n\n    const matches = new MatchList(maxResults);\n    for (const word of words) {\n        const match = regex.exec(word);\n        if (!match) continue;\n\n        matches.addResult(word, match.index);\n    }\n\n    const result = matches.toEntries();\n    if (result.length !== 0)\n      return result;\n\n    const stemmed = stem(regex.source);\n    if (stemmed === regex.source)\n      return result;\n\n    return findByRegex(stemmed, maxResults);\n}\nwindow['findByRegex'] = findByRegex;","import { createPopper } from '@popperjs/core';\nimport { useState, useEffect } from 'react';\n\nexport const getSelection = () => {\n    if (!window.getSelection)\n        return null;\n\n    const selection = document.getSelection();\n    if (!selection)\n        return null;\n\n    return selection.toString();\n}\n\nexport const getSelectedWord = () => {\n    const selection = document.getSelection();\n    if (!selection)\n        return null;\n\n    if (selection.rangeCount === 0)\n        return null;\n\n    const selectionText = selection.toString();\n\n    const words = selectionText.split(' ').filter(t => t);\n    if (words.length !== 1)\n        return null;\n\n    const word = words[0].trim();\n    if (word.length === 0)\n        return null;\n\n    const range = selection.getRangeAt(0);\n    return { word: word, rect: range.getBoundingClientRect() };\n}\n\nlet selected: { word: string, rect: ClientRect };\nconst selectedListeners: any[] = [];\n\nexport const useSelectedWord = () => {\n    const [r, setR] = useState<typeof selected | null>(null);\n\n    useEffect(() => {\n        selectedListeners.push(setR);\n\n        return () => {\n            const removeAt = selectedListeners.indexOf(setR);\n            if (removeAt === -1) return;\n\n            selectedListeners.splice(removeAt, 1);\n        }\n    });\n\n    return r;\n}\n\nconst clearSelection = () => {\n    for (const listener of selectedListeners)\n        listener(null);\n}\n\nconst updateSelection = () => {\n    const selected = getSelectedWord();\n    for (const listener of selectedListeners)\n        listener(selected);\n}\n\nwindow.addEventListener('scroll', updateSelection, { passive: true });\nwindow.addEventListener('pushState', updateSelection);\nwindow.addEventListener('replaceState', updateSelection);\n\ndocument.addEventListener('selectionchange', updateSelection);","import * as React from 'react';\nimport { Entry, Definition, entries } from './dictionary';\n\nimport \"./selectionHelper\";\n\nconst wordLinkClickHandler = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    if (e.ctrlKey)\n      return;\n\n    e.preventDefault();\n    window.history.pushState(null, \"\", e.currentTarget.href)\n};\n\nexport const WordLink = ({ word }: { word: string }) => {\n    return <a href={`?query=${word}`} onClick={wordLinkClickHandler}>{word}</a>\n}\n\nconst Def = ({ definition }: { definition: string }) => {\n    if (!definition)\n      return null;\n\n    const linkPrefix = '___'\n    let parts = definition.split(/(___\\w+)/g).map((w, i) => <React.Fragment key={i}>\n        {w.startsWith(linkPrefix)\n            ? <WordLink word={w.substring(linkPrefix.length)}/>\n            : w}\n    </React.Fragment>);\n    return <>\n      {parts}\n    </>\n};\n\nexport const SearchResult = ({ entry }: { entry: Entry }) => {\n    return <div className=\"search-result\">\n        <h2>{entry.word}</h2>\n        <ul>\n            {entry.map((d, i) => <li key={i}>\n                <Def definition={d.definition}/>\n                {/* <br />\n                <Related definition={d} /> */}\n            </li>)}\n        </ul>\n    </div>\n}","import { useState, useEffect } from \"react\";\n\nvar _wr = function(type) {\n    var orig = window.history[type];\n    return function() {\n        var rv = orig.apply(window.history, arguments);\n        var e = new Event(type);\n        e['arguments'] = arguments;\n        window.dispatchEvent(e);\n        return rv;\n    };\n};\nwindow.history.pushState = _wr('pushState');\nwindow.history.replaceState = _wr('replaceState');\n\nconst locationListeners: any[] = [];\nexport const useQueryString = () => {\n    const [query, setQuery] = useState(window.location.search);\n    useEffect(() => {\n        locationListeners.push(setQuery);\n\n        return () => {\n            const index = locationListeners.indexOf(setQuery);\n            locationListeners.splice(index, 1);\n        }\n    });\n\n    return query;\n}\n\nconst onLocationChanged = () => {\n    for (const listener of locationListeners) {\n        listener(window.location.search);\n    }\n}\n\nwindow.addEventListener('pushState', onLocationChanged);\nwindow.addEventListener('replaceState', onLocationChanged);\nwindow.addEventListener('hashchange', onLocationChanged);\nwindow.addEventListener('popstate', onLocationChanged);","import React, { useState, useCallback, useEffect } from 'react';\nimport { findByRegex, Entry, didYouMean } from './dictionary';\nimport { SearchResult, WordLink } from './SearchResult';\nimport { useDebounce } from './throttle';\nimport { useQueryString } from './history';\n\nexport const Search = (props) => {\n    const [query, setQuery] = useState('');\n    const locationQueryString = useQueryString();\n\n    const debouncedQuery = useDebounce(query, 500);\n    const [loading, setLoading] = useState(true);\n\n    const [results, setResults] = useState<Entry[]>([]);\n    const [suggestions, setSuggestions] = useState<Entry[]>([]);\n\n    const updateResults = async (q?) => {\n        if (!q) q = query;\n\n        setLoading(true);\n        setSuggestions([]);\n        setResults(await findByRegex(q));\n        setLoading(false);\n        window.history.replaceState({},\n            `Dictionary results for ${q}`,\n            `?query=${encodeURIComponent(q)}`);\n    }\n\n    const onSearchChanged = useCallback(async e => {\n        const query: string = e.target.value;\n        setQuery(query);\n\n        await updateResults(query);\n    }, []);\n\n    // When location.search changes, update the search results.\n    useEffect(() => {\n        const searchParams = new URLSearchParams(locationQueryString);\n        const paramsQuery = decodeURIComponent(searchParams.get('query') || '');\n\n        if (paramsQuery === query)\n            return;\n            \n        setQuery(paramsQuery);\n        updateResults(paramsQuery);\n    }, [locationQueryString]);\n\n    // Get suggestions if the user has stopped typing and there are no results.\n    useEffect(() => {\n        if (results.length !== 0 || query !== debouncedQuery || !query.length)\n            return;\n\n        didYouMean(debouncedQuery).then(setSuggestions);\n    }, [debouncedQuery, query, results]);\n\n    // On initial load, display some words.\n    useEffect(() => {\n      updateResults();\n    }, []);\n\n    const showSuggestions = suggestions.length !== 0 && results.length === 0;\n\n    return <div>\n        <div className=\"search-header\">\n            <input className=\"search-box\"\n                type=\"search\"\n                value={query}\n                placeholder=\"search for words\"\n                onChange={onSearchChanged} />\n        </div>\n        <div>\n            {(!loading && results.length === 0\n                ? <h2>No results</h2>\n                : results.map(entry => <SearchResult entry={entry} key={entry.word} />))}\n            {showSuggestions && <div>\n                <h2>Did you mean:</h2>\n                <ul>\n                    {suggestions.map(s => <li key={s.word}><WordLink word={s.word} /></li>)}\n                </ul>\n            </div>}\n            {loading && <div className=\"spinner\" />}\n        </div>\n    </div>;\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => clearTimeout(handler);\n    }, [value, delay]);\n\n    return debouncedValue;\n}\n  ","import React, { useCallback } from \"react\"\nimport { useSelectedWord } from \"./selectionHelper\";\nimport { Popper } from 'react-popper';\n\nclass VirtualReference {\n    rect: ClientRect;\n\n    getBoundingClientRect() {\n        return this.rect;\n    }\n\n    constructor(rect: ClientRect) {\n        this.rect = rect;\n    }\n\n    get clientWidth() {\n        return this.getBoundingClientRect().width;\n    }\n\n    get clientHeight() {\n        return this.getBoundingClientRect().height;\n    }\n}\n\nexport const WordTip = ({ word }: { word: string }) => {\n    const selected = useSelectedWord();\n    const searchCallback = useCallback(() =>\n        window.history.pushState(null, \"Dictionary\", `?query=${encodeURIComponent(selected ? selected.word : '')}`),\n        [selected]);\n\n    if (!selected)\n      return null;\n\n    const virtualRef = new VirtualReference(selected.rect);\n    return <Popper referenceElement={virtualRef} placement=\"bottom\">\n        {({ ref, style, placement }) => <div ref={ref} style={style} data-placement={placement} className=\"word-tip\">\n            <button onClick={searchCallback}>\n                Search\n            </button>\n        </div>}\n    </Popper>\n}","import React from 'react';\nimport './App.css';\n\nimport {Search } from './Search';\nimport { WordTip } from './WordTip';\n\nfunction App() {\n  return (\n    <div className=\"dictionary\">\n      <Search/>\n      <WordTip word=\"foo\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './spinner.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ensureLoaded } from './dictionary';\n\nensureLoaded();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}