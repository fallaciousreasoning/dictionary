{"version":3,"sources":["dictionary.ts","Search.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["words","window","entries","ensureLoaded","Promise","resolve","reject","a","length","fetch","dictionaryResponse","json","word","push","search","regexString","split","join","findByRegex","regex","maxResults","RegExp","result","test","map","r","Search","props","useState","query","setQuery","results","setResults","onSearchChanged","useCallback","e","target","value","onChange","key","entry","i","definition","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAAaA,EAAkB,GAC/BC,OAAM,MAAYD,EAEX,IAAME,EAKT,GACJD,OAAM,QAAcC,EAEb,IAAMC,EAAe,kBAAM,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAC,EAAA,0DAEtCP,EAAMQ,OAFgC,uBAGtCH,IAHsC,0CAOTI,MAAM,mBAPG,cAOpCC,EAPoC,gBAQvBA,EAAmBC,OARI,OAU1C,IAAWC,KAFLD,EARoC,OAWtCX,EAAMa,KAAKD,GACXV,EAAQU,GAAQD,EAAKC,GACrBV,EAAQU,GAAMA,KAAOA,EAGzBP,IAhB0C,4CAAZ,0DAiClCJ,OAAM,eARwB,SAACa,GAC3B,IAAMC,EAAcD,EAEfE,MAAM,KAAKC,KAAK,MAEhBD,MAAM,KAAKC,KAAK,KACrB,OAAOC,EAAYH,IAIhB,IAAMG,EAAW,uCAAG,WAAOC,GAAP,yCAAAZ,EAAA,6DAA+Ba,EAA/B,+BAA4C,IAC9C,kBAAVD,IACPA,EAAQ,IAAIE,OAAOF,EAAO,MAFP,SAIjBhB,IAJiB,OAMnBmB,EAAmB,GANA,8BAOJtB,EAPI,sEAOZY,EAPY,QAQfO,EAAMI,KAAKX,IACXU,EAAOT,KAAKD,KAEZU,EAAOd,QAAUY,GAXF,oVAehBE,EAAOE,KAAI,SAAAC,GAAC,OAAIvB,EAAQuB,OAfR,4EAAH,sDAiBxBxB,OAAM,YAAkBiB,EC3DjB,IAAMQ,EAAS,SAACC,GAAW,IAAD,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,OAECF,mBAAgB,IAFjB,mBAEtBG,EAFsB,KAEbC,EAFa,KAGvBC,EAAkBC,sBAAW,uCAAC,WAAMC,GAAN,eAAA5B,EAAA,6DAC1BsB,EAAgBM,EAAEC,OAAOC,MAC/BP,EAASD,GAFuB,KAGhCG,EAHgC,SAGfd,EAAYW,GAHG,6EAAD,sDAIhC,IAEH,OAAO,6BACH,6BACI,yCACA,2BAAOQ,MAAOR,EAAOS,SAAUL,KAEnC,6BACI,0CACA,6BACKF,EAAQP,KAAI,SAAAC,GAAC,OAAI,yBAAKc,IAAKd,EAAEb,MAC1B,4BAAKa,EAAEb,MACP,4BACKa,EAAED,KAAI,SAACgB,EAAOC,GAAR,OAAc,wBAAIF,IAAKE,GACzBD,EAAME,wBCZpBC,MARf,WACE,OACE,yBAAKC,UAAU,cACb,kBAAC,EAAD,QCIcC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCXN7C,IAEA8C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.67f96382.chunk.js","sourcesContent":["export const words: string[] = [];\nwindow['words'] = words;\n\nexport const entries: {\n    [word: string]: {\n        word: string;\n        definitions: string[];\n    }\n} = {};\nwindow['entries'] = entries;\n\nexport const ensureLoaded = () => new Promise(async (resolve, reject) => {\n    // If we have words, return.\n    if (words.length) {\n        resolve();\n        return;\n    }\n\n    const dictionaryResponse = await fetch('dictionary.json');\n    const json = await dictionaryResponse.json();\n\n    for (const word in json) {\n        words.push(word);\n        entries[word] = json[word];\n        entries[word].word = word;\n    }\n\n    resolve();\n});\n\nexport const wordExists = async (word: string) => {\n    await ensureLoaded();\n\n    return !!entries[word];\n}\n\nexport const findByWildCard = (search: string) => {\n    const regexString = search\n        // * ==> (.*)\n        .split('*').join('.*')\n        // ? ==> .\n        .split('?').join('.');\n    return findByRegex(regexString);\n}\nwindow['findByWildcard'] = findByWildCard;\n\nexport const findByRegex = async (regex: RegExp | string, maxResults = 100) => {\n    if (typeof regex === 'string')\n        regex = new RegExp(regex, 'i');\n\n    await ensureLoaded();\n\n    let result: string[] = [];\n    for (const word of words) {\n        if (regex.test(word))\n            result.push(word);\n\n        if (result.length >= maxResults)\n            break;\n    }\n\n    return result.map(r => entries[r]);\n}\nwindow['findByRegex'] = findByRegex;","import React, { useState, useCallback } from 'react';\nimport { findByRegex } from './dictionary';\n\n\nexport const Search = (props) => {\n    const [query, setQuery] = useState('');\n    const [results, setResults] = useState<any[]>([]);\n    const onSearchChanged = useCallback(async e => {\n        const query: string = e.target.value;\n        setQuery(query);\n        setResults(await findByRegex(query))\n    }, []);\n\n    return <div>\n        <div>\n            <label>Search</label>\n            <input value={query} onChange={onSearchChanged} />\n        </div>\n        <div>\n            <span>Results:</span>\n            <div>\n                {results.map(r => <div key={r.word}>\n                    <h2>{r.word}</h2>\n                    <ul>\n                        {r.map((entry, i) => <li key={i}>\n                            {entry.definition}\n                        </li>)}\n                    </ul>\n                </div>)}\n            </div>\n        </div>\n    </div>;\n}","import React from 'react';\nimport './App.css';\n\nimport {Search } from './Search';\n\nfunction App() {\n  return (\n    <div className=\"dictionary\">\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ensureLoaded } from './dictionary';\n\nensureLoaded();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}