{"version":3,"sources":["dictionary.ts","Search.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["console","log","globalThis","words","window","entries","dictionaryLoadPromise","getRawWords","a","localForage","getItem","rawText","fetch","dictionaryResponse","ok","text","setItem","JSON","parse","ensureLoaded","Promise","resolve","reject","length","word","rawWords","push","sort","search","regexString","split","join","findByRegex","MatchList","maxResults","results","this","matchPosition","insertionIndex","splice","pop","map","r","regex","RegExp","matches","match","exec","addResult","index","toEntries","Search","props","useState","query","setQuery","setResults","onSearchChanged","useCallback","e","target","value","history","replaceState","encodeURIComponent","useEffect","paramsQuery","URLSearchParams","location","get","then","onChange","i","key","entry","definition","App","className","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58a1d79e.chunk.js","sourcesContent":["import localForage from 'localforage';\nconsole.log(globalThis)\n\nconst dictionaryName = 'dictionary.json';\n\nexport const words: string[] = [];\nwindow['words'] = words;\n\nexport const entries: {\n    [word: string]: {\n        word: string;\n        definitions: string[];\n    }\n} = {};\nwindow['entries'] = entries;\n\nconst getRawWords = async () => {\n    let rawText = await localForage.getItem<string>(dictionaryName);\n    if (!rawText) {\n        const dictionaryResponse = await fetch('./' + dictionaryName);\n        if (!dictionaryResponse.ok)\n            return {};\n\n        // Save the dictionary to disk.\n        rawText = await dictionaryResponse.text();\n\n        await localForage.setItem(dictionaryName, rawText);\n    }\n\n    return JSON.parse(rawText);\n}\n\nlet dictionaryLoadPromise: Promise<void>;\nexport const ensureLoaded = async () => {\n    if (!dictionaryLoadPromise) {\n        dictionaryLoadPromise = new Promise(async (resolve, reject) => {\n            // If we have words, return.\n            if (words.length) {\n                resolve();\n                return;\n            }\n\n            const rawWords = await getRawWords();\n\n            for (const word in rawWords) {\n                words.push(word);\n                entries[word] = rawWords[word];\n                entries[word].word = word;\n            }\n\n            words.sort();\n\n            resolve();\n        });\n    }\n    return dictionaryLoadPromise;\n}\n\nexport const wordExists = async (word: string) => {\n    await ensureLoaded();\n\n    return !!entries[word];\n}\n\nexport const findByWildCard = (search: string) => {\n    const regexString = search\n        // * ==> (.*)\n        .split('*').join('.*')\n        // ? ==> .\n        .split('?').join('.');\n    return findByRegex(regexString);\n}\nwindow['findByWildcard'] = findByWildCard;\n\nclass MatchList {\n    results: { word: string, matchPosition: number }[];\n    maxResults: number;\n\n    constructor(maxResults: number) {\n        this.results = [];\n        this.maxResults = maxResults;\n    }\n\n    addResult(word: string, matchPosition: number) {\n        let insertionIndex = 0;\n        while (insertionIndex < this.results.length\n            && this.results[insertionIndex].matchPosition <= matchPosition) {\n            insertionIndex++;\n        }\n\n        this.results.splice(insertionIndex, 0, { word, matchPosition })\n\n        // If we have too many results, remove the last one.\n        if (this.results.length > this.maxResults)\n            this.results.pop();\n    }\n\n    toEntries() {\n        return this.results.map(r => entries[r.word]);\n    }\n}\n\nexport const findByRegex = async (regex: RegExp | string, maxResults = 100) => {\n    if (typeof regex === 'string')\n        regex = new RegExp(regex, 'i');\n\n    await ensureLoaded();\n\n    const matches = new MatchList(maxResults);\n    for (const word of words) {\n        const match = regex.exec(word);\n        if (!match) continue;\n\n        matches.addResult(word, match.index);\n    }\n\n    return matches.toEntries();\n}\nwindow['findByRegex'] = findByRegex;","import React, { useState, useCallback, useEffect } from 'react';\nimport { findByRegex } from './dictionary';\n\n\nexport const Search = (props) => {\n    const [query, setQuery] = useState('');\n\n    const [results, setResults] = useState<any[]>([]);\n    const onSearchChanged = useCallback(async e => {\n        const query: string = e.target.value;\n        setQuery(query);\n        setResults(await findByRegex(query))\n        window.history.replaceState({},\n            `Dictionary results for ${query}`,\n            `?query=${encodeURIComponent(query)}`)\n    }, []);\n\n    useEffect(() => {\n        const searchParams = new URLSearchParams(window.location.search);\n        const paramsQuery = searchParams.get('query');\n        if (!paramsQuery) return;\n\n        setQuery(paramsQuery);\n        findByRegex(paramsQuery).then(setResults);\n        return () => {}\n    }, []);\n\n    return <div>\n        <div>\n            <label>Search</label>\n            <input value={query} onChange={onSearchChanged} />\n        </div>\n        <div>\n            <span>Results:</span>\n            <div>\n                {results.map((r, i) => <div key={i}>\n                    <h2>{r.word}</h2>\n                    <ul>\n                        {r.map((entry, i) => <li key={i}>\n                            {entry.definition}\n                        </li>)}\n                    </ul>\n                </div>)}\n            </div>\n        </div>\n    </div>;\n}","import React from 'react';\nimport './App.css';\n\nimport {Search } from './Search';\n\nfunction App() {\n  return (\n    <div className=\"dictionary\">\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ensureLoaded } from './dictionary';\n\nensureLoaded();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}